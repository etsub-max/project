#include <iostream>
#include <vector>
using namespace std;

// Base class: Student
class Student {
protected:
    string name;
    int id;

public:
    Student(string name, int id) : name(name), id(id) {}

    virtual void displayInfo() {
        cout << "Name: " << name << endl;
        cout << "ID: " << id << endl;
    }

    int getID() {
        return id;
    }

    virtual ~Student() {}
};

// Derived class: Undergraduate
class Undergraduate : public Student {
    string major;

public:
    Undergraduate(string name, int id, string major)
        : Student(name, id), major(major) {}

    void displayInfo() override {
        cout << "[Undergraduate Student]" << endl;
        Student::displayInfo();
        cout << "Major: " << major << endl;
    }
};

// Derived class: Graduate
class Graduate : public Student {
    string thesisTitle;

public:
    Graduate(string name, int id, string thesisTitle)
        : Student(name, id), thesisTitle(thesisTitle) {}

    void displayInfo() override {
        cout << "[Graduate Student]" << endl;
        Student::displayInfo();
        cout << "Thesis Title: " << thesisTitle << endl;
    }
};

int main() {
    vector<Student*> studentList;
    int choice;

    do {
        cout << "\n===== Student Management System =====\n";
        cout << "1. Add Undergraduate Student\n";
        cout << "2. Add Graduate Student\n";
        cout << "3. Display All Students\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            string name, major;
            int id;
            cin.ignore();
            cout << "Enter name: ";
            getline(cin, name);
            cout << "Enter ID: ";
            cin >> id;
            cin.ignore();
            cout << "Enter major: ";
            getline(cin, major);
            studentList.push_back(new Undergraduate(name, id, major));
            cout << "Undergraduate student added.\n";
        }
        else if (choice == 2) {
            string name, thesis;
            int id;
            cin.ignore();
            cout << "Enter name: ";
            getline(cin, name);
            cout << "Enter ID: ";
            cin >> id;
            cin.ignore();
            cout << "Enter thesis title: ";
            getline(cin, thesis);
            studentList.push_back(new Graduate(name, id, thesis));
            cout << "Graduate student added.\n";
        }
        else if (choice == 3) {
            cout << "\n--- Student List ---\n";
            for (Student* s : studentList) {
                s->displayInfo();
                cout << "-------------------\n";
            }
        }
        else if (choice == 4) {
            cout << "Exiting the system.\n";
        }
        else {
            cout << "Invalid choice. Try again.\n";
        }

    } while (choice != 4);

    // Clean up memory before exit
    for (Student* s : studentList) {
        delete s;
    }

    return 0;
}
